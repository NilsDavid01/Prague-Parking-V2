using Microsoft.VisualStudio.TestTools.UnitTesting;
using PragueParking;
using System;

namespace UnitTests
{
    [TestClass]
    public class ParkingTests
    {
        [TestMethod]
        public void ParkCar_ShouldOccupyOneSpot()
        {
            var garage = new ParkingGarage();
            garage.Initialize(10);
            var car = new Car("ABC123");

            var result = garage.ParkVehicle(car);

            Assert.IsTrue(result.success);
            Assert.AreEqual(1, result.spotNumber);
        }

        [TestMethod]
        public void RemoveVehicle_ShouldFreeUpSpot()
        {
            var garage = new ParkingGarage();
            garage.Initialize(10);
            var car = new Car("ABC123");
            garage.ParkVehicle(car);

            var result = garage.RemoveVehicle("ABC123");

            Assert.IsTrue(result.success);
            Assert.AreEqual(10, garage.GetAvailableSpotsCount());
        }

        [TestMethod]
        public void CalculateParkingFee_First10MinutesFree()
        {
            var car = new Car("ABC123");
            car.ArrivalTime = DateTime.Now.AddMinutes(-5);

            var fee = car.CalculateParkingFee(DateTime.Now);

            Assert.AreEqual(0, fee);
        }

        [TestMethod]
        public void CalculateParkingFee_OneHourShouldChargeFullRate()
        {
            var car = new Car("ABC123");
            car.ArrivalTime = DateTime.Now.AddHours(-1).AddMinutes(-1);

            var fee = car.CalculateParkingFee(DateTime.Now);

            Assert.AreEqual(20, fee);
        }

        [TestMethod]
        public void FindVehicle_ShouldReturnCorrectSpot()
        {
            var garage = new ParkingGarage();
            garage.Initialize(10);
            var car = new Car("ABC123");
            garage.ParkVehicle(car);

            var result = garage.FindVehicle("ABC123");

            Assert.IsTrue(result.found);
            Assert.AreEqual(1, result.spotNumber);
            Assert.IsNotNull(result.vehicle);
            Assert.AreEqual("ABC123", result.vehicle.RegistrationNumber);
        }

        [TestMethod]
        public void ParkMotorcycle_CanShareSpotWithAnotherMotorcycle()
        {
            var garage = new ParkingGarage();
            garage.Initialize(10);
            var mc1 = new Motorcycle("MC001");
            var mc2 = new Motorcycle("MC002");

            var result1 = garage.ParkVehicle(mc1);
            var result2 = garage.ParkVehicle(mc2);

            Assert.IsTrue(result1.success);
            Assert.IsTrue(result2.success);
            Assert.AreEqual(result1.spotNumber, result2.spotNumber);
        }

        [TestMethod]
        public void ParkBus_ShouldRequireFourConsecutiveSpots()
        {
            var garage = new ParkingGarage();
            garage.Initialize(10);
            var bus = new Bus("BUS001");

            var result = garage.ParkVehicle(bus);

            Assert.IsTrue(result.success);
            Assert.IsTrue(result.spotNumber >= 1 && result.spotNumber <= 7);
        }

        [TestMethod]
        public void Vehicle_ValidRegistrationNumber_ShouldPassValidation()
        {
            var car = new Car("AB123");

            var isValid = car.IsValidRegistration("AB123");

            Assert.IsTrue(isValid);
        }

        [TestMethod]
        public void Vehicle_InvalidRegistrationNumber_ShouldFailValidation()
        {
            var car = new Car("");

            var isValid = car.IsValidRegistration("INVALID_REGISTRATION_TOO_LONG");

            Assert.IsFalse(isValid);
        }

        [TestMethod]
        public void ParkingSpot_PartiallyFull_ShouldShowCorrectSymbol()
        {
            var spot = new ParkingSpot(1);
            var mc1 = new Motorcycle("MC001");

            spot.ParkVehicle(mc1);
            var symbol = spot.GetMapSymbol();

            Assert.AreEqual('◐', symbol);
        }
    }
}
